{"paragraphs":[{"text":"%md\r\n## 1. Load User Data from HDFS\r\n","user":"anonymous","dateUpdated":"2025-06-17T08:36:21+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750149368663_-1449889005","id":"20250617-083608_750992991","dateCreated":"2025-06-17T08:36:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21081","dateFinished":"2025-06-17T08:36:22+0000","dateStarted":"2025-06-17T08:36:21+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>1. Load User Data from HDFS</h2>\n"}]}},{"text":"%pyspark\r\n\r\n# Read u.user from HDFS\r\nuser_rdd = sc.textFile(\"hdfs:///user/maria_dev/movielens/u.user\")\r\n\r\n# Parse into structured data\r\nfrom pyspark.sql import Row\r\n\r\nuser_df = user_rdd.map(lambda line: line.split(\"|\")) \\\r\n    .map(lambda parts: Row(\r\n        userid=int(parts[0]),\r\n        age=int(parts[1]),\r\n        gender=parts[2],\r\n        occupation=parts[3],\r\n        zipcode=parts[4])\r\n    ).toDF()\r\n\r\n# Display the first few records\r\nuser_df.show(5)\r\n","user":"anonymous","dateUpdated":"2025-06-17T08:10:46+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+------+----------+------+-------+\n|age|gender|occupation|userid|zipcode|\n+---+------+----------+------+-------+\n| 24|     M|technician|     1|  85711|\n| 53|     F|     other|     2|  94043|\n| 23|     M|    writer|     3|  32067|\n| 24|     M|technician|     4|  43537|\n| 33|     F|     other|     5|  15213|\n+---+------+----------+------+-------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750132860861_1109021587","id":"20250617-040100_921215225","dateCreated":"2025-06-17T04:01:00+0000","dateStarted":"2025-06-17T08:10:46+0000","dateFinished":"2025-06-17T08:10:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19963"},{"text":"%md\n## 2. Rename Columns and Write to Cassandra\n","user":"anonymous","dateUpdated":"2025-06-17T08:36:52+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750149407087_-641855018","id":"20250617-083647_974519296","dateCreated":"2025-06-17T08:36:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21181","dateFinished":"2025-06-17T08:36:52+0000","dateStarted":"2025-06-17T08:36:52+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>2. Rename Columns and Write to Cassandra</h2>\n"}]}},{"text":"%pyspark\n\n# Change the column names from userid → user_id, zipcode → zip\nrenamed_df = user_df \\\n    .withColumnRenamed(\"userid\", \"user_id\") \\\n    .withColumnRenamed(\"zipcode\", \"zip\")\n\n# Writing to Cassandra\nrenamed_df.write \\\n    .format(\"org.apache.spark.sql.cassandra\") \\\n    .mode(\"append\") \\\n    .option(\"keyspace\", \"movielens\") \\\n    .option(\"table\", \"users\") \\\n    .option(\"spark.cassandra.connection.host\", \"127.0.0.1\") \\\n    .save()\n","user":"anonymous","dateUpdated":"2025-06-17T08:10:47+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1750133397991_452402999","id":"20250617-040957_1493557807","dateCreated":"2025-06-17T04:09:57+0000","dateStarted":"2025-06-17T08:10:47+0000","dateFinished":"2025-06-17T08:11:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19964"},{"text":"%md\r\n## 3. Load User Data from Cassandra\r\n","user":"anonymous","dateUpdated":"2025-06-17T08:37:36+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750149448615_-451142157","id":"20250617-083728_1476486813","dateCreated":"2025-06-17T08:37:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21271","dateFinished":"2025-06-17T08:37:36+0000","dateStarted":"2025-06-17T08:37:36+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>3. Load User Data from Cassandra</h2>\n"}]}},{"text":"%pyspark\n\ndf_from_cassandra = spark.read \\\n    .format(\"org.apache.spark.sql.cassandra\") \\\n    .option(\"keyspace\", \"movielens\") \\\n    .option(\"table\", \"users\") \\\n    .option(\"spark.cassandra.connection.host\", \"127.0.0.1\") \\\n    .load()\n\ndf_from_cassandra.show(5)\n\n","user":"anonymous","dateUpdated":"2025-06-17T08:10:46+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---+------+----------+-----+\n|user_id|age|gender|occupation|  zip|\n+-------+---+------+----------+-----+\n|    496| 21|     F|   student|55414|\n|    250| 29|     M| executive|95110|\n|    675| 34|     M|     other|28814|\n|    175| 26|     F| scientist|21911|\n|    637| 30|     M|     other|74101|\n+-------+---+------+----------+-----+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750133086324_1364634419","id":"20250617-040446_993552793","dateCreated":"2025-06-17T04:04:46+0000","dateStarted":"2025-06-17T08:10:50+0000","dateFinished":"2025-06-17T08:11:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19965"},{"text":"%md\n## 4. Load and Parse Rating Data\n","user":"anonymous","dateUpdated":"2025-06-17T08:37:56+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750149463016_-1265655579","id":"20250617-083743_1803642569","dateCreated":"2025-06-17T08:37:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21376","dateFinished":"2025-06-17T08:37:56+0000","dateStarted":"2025-06-17T08:37:56+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>4. Load and Parse Rating Data</h2>\n"}]}},{"text":"%pyspark\n\n\n# 1. Read the rating data u.data from HDFS\nrating_rdd = sc.textFile(\"hdfs:///user/maria_dev/movielens/u.data\")\n\n# 2. Convert to structured Row\nfrom pyspark.sql import Row\n\nrating_df = rating_rdd.map(lambda line: line.split(\"\\t\")) \\\n    .map(lambda parts: Row(\n        user_id=int(parts[0]),\n        item_id=int(parts[1]),\n        rating=int(parts[2]))\n    ).toDF()\n\n# 3. Display the first few rating data\nrating_df.show(5)\n","user":"anonymous","dateUpdated":"2025-06-17T08:10:47+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+------+-------+\n|item_id|rating|user_id|\n+-------+------+-------+\n|    242|     3|    196|\n|    302|     3|    186|\n|    377|     1|     22|\n|     51|     2|    244|\n|    346|     1|    166|\n+-------+------+-------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750133999508_-584221096","id":"20250617-041959_1959998657","dateCreated":"2025-06-17T04:19:59+0000","dateStarted":"2025-06-17T08:11:01+0000","dateFinished":"2025-06-17T08:11:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19966"},{"text":"%md\n## 5. Average Rating per Movie\n\n","user":"anonymous","dateUpdated":"2025-06-17T08:38:13+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750149484199_121794927","id":"20250617-083804_2128979587","dateCreated":"2025-06-17T08:38:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21466","dateFinished":"2025-06-17T08:38:13+0000","dateStarted":"2025-06-17T08:38:13+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>5. Average Rating per Movie</h2>\n"}]}},{"text":"%pyspark\n\nfrom pyspark.sql.functions import avg\n\n# Group by item_id and calculate the average rating\navg_ratings_df = rating_df.groupBy(\"item_id\").agg(avg(\"rating\").alias(\"avg_rating\"))\n\n# Display the first 10 results\navg_ratings_df.show(10)\n","user":"anonymous","dateUpdated":"2025-06-17T08:10:47+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+------------------+\n|item_id|        avg_rating|\n+-------+------------------+\n|    474| 4.252577319587629|\n|     29|2.6666666666666665|\n|     26| 3.452054794520548|\n|    964|3.3333333333333335|\n|   1677|               3.0|\n|     65|3.5391304347826087|\n|    191| 4.163043478260869|\n|   1224|2.6666666666666665|\n|    558|3.6714285714285713|\n|   1010|              3.25|\n+-------+------------------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750134216579_-1964822219","id":"20250617-042336_1946830163","dateCreated":"2025-06-17T04:23:36+0000","dateStarted":"2025-06-17T08:11:02+0000","dateFinished":"2025-06-17T08:11:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19967"},{"text":"%md\n## 6. Load Movie Titles from u.item\n\n","user":"anonymous","dateUpdated":"2025-06-17T08:38:31+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750149501015_-1673227258","id":"20250617-083821_301903795","dateCreated":"2025-06-17T08:38:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21568","dateFinished":"2025-06-17T08:38:31+0000","dateStarted":"2025-06-17T08:38:31+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>6. Load Movie Titles from u.item</h2>\n"}]}},{"text":"%pyspark\n\n# Read u.item file\nitem_rdd = sc.textFile(\"hdfs:///user/maria_dev/movielens/u.item\")\n\n# Take the first two fields: movie_id and title\nfrom pyspark.sql import Row\n\nitem_df = item_rdd.map(lambda line: line.split(\"|\")) \\\n    .map(lambda parts: Row(\n        item_id=int(parts[0]),\n        title=parts[1])\n    ).toDF()\n\nitem_df.show(5)\n","user":"anonymous","dateUpdated":"2025-06-17T08:10:47+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+-----------------+\n|item_id|            title|\n+-------+-----------------+\n|      1| Toy Story (1995)|\n|      2| GoldenEye (1995)|\n|      3|Four Rooms (1995)|\n|      4|Get Shorty (1995)|\n|      5|   Copycat (1995)|\n+-------+-----------------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750134602143_-617647754","id":"20250617-043002_469014429","dateCreated":"2025-06-17T04:30:02+0000","dateStarted":"2025-06-17T08:11:07+0000","dateFinished":"2025-06-17T08:11:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19968"},{"text":"%md\r\n## 7. Join Movie Titles with Average Ratings\r\n","user":"anonymous","dateUpdated":"2025-06-17T08:38:43+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750149517192_-601670922","id":"20250617-083837_1692630640","dateCreated":"2025-06-17T08:38:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21661","dateFinished":"2025-06-17T08:38:43+0000","dateStarted":"2025-06-17T08:38:43+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>7. Join Movie Titles with Average Ratings</h2>\n"}]}},{"text":"%pyspark\n\n# Join the average movie rating with the movie name\njoined_df = avg_ratings_df.join(item_df, on=\"item_id\")\n\n# Display the first 10 results\njoined_df.select(\"title\", \"avg_rating\").show(10, truncate=False)\n","user":"anonymous","dateUpdated":"2025-06-17T08:10:47+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------------------------------------------------------------------------+------------------+\n|title                                                                      |avg_rating        |\n+---------------------------------------------------------------------------+------------------+\n|Brothers McMullen, The (1995)                                              |3.452054794520548 |\n|Batman Forever (1995)                                                      |2.6666666666666665|\n|Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb (1963)|4.252577319587629 |\n|Month by the Lake, A (1995)                                                |3.3333333333333335|\n|Sweet Nothing (1995)                                                       |3.0               |\n|What's Eating Gilbert Grape (1993)                                         |3.5391304347826087|\n|Amadeus (1984)                                                             |4.163043478260869 |\n|Cinderella (1950)                                                          |3.5813953488372094|\n|Mortal Kombat (1995)                                                       |2.877551020408163 |\n|Heavenly Creatures (1994)                                                  |3.6714285714285713|\n+---------------------------------------------------------------------------+------------------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750134691764_-97361617","id":"20250617-043131_1486072391","dateCreated":"2025-06-17T04:31:31+0000","dateStarted":"2025-06-17T08:11:36+0000","dateFinished":"2025-06-17T08:11:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19969"},{"text":"%md\r\n## 8. Top 10 Highest Rated Movies\r\n","user":"anonymous","dateUpdated":"2025-06-17T08:39:00+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750149536343_-804803017","id":"20250617-083856_1313507207","dateCreated":"2025-06-17T08:38:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21751","dateFinished":"2025-06-17T08:39:00+0000","dateStarted":"2025-06-17T08:39:00+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>8. Top 10 Highest Rated Movies</h2>\n"}]}},{"text":"%pyspark\n\n# Top 10 highest rated movies\ntop10_movies = joined_df.select(\"title\", \"avg_rating\") \\\n    .orderBy(\"avg_rating\", ascending=False)\n\ntop10_movies.show(10, truncate=False)\n\n","user":"anonymous","dateUpdated":"2025-06-17T08:10:47+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------------------------------------+----------+\n|title                                            |avg_rating|\n+-------------------------------------------------+----------+\n|Star Kid (1997)                                  |5.0       |\n|Santa with Muscles (1996)                        |5.0       |\n|Entertaining Angels: The Dorothy Day Story (1996)|5.0       |\n|They Made Me a Criminal (1939)                   |5.0       |\n|Great Day in Harlem, A (1994)                    |5.0       |\n|Aiqing wansui (1994)                             |5.0       |\n|Marlene Dietrich: Shadow and Light (1996)        |5.0       |\n|Prefontaine (1997)                               |5.0       |\n|Someone Else's America (1995)                    |5.0       |\n|Saint of Fort Washington, The (1993)             |5.0       |\n+-------------------------------------------------+----------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750134705621_1585175972","id":"20250617-043145_1572895947","dateCreated":"2025-06-17T04:31:45+0000","dateStarted":"2025-06-17T08:11:37+0000","dateFinished":"2025-06-17T08:12:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19970"},{"text":"%md\n## 9. Movies with ≥ 50 Ratings\n\n","user":"anonymous","dateUpdated":"2025-06-17T08:39:48+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750149567040_1864847007","id":"20250617-083927_983968771","dateCreated":"2025-06-17T08:39:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21844","dateFinished":"2025-06-17T08:39:48+0000","dateStarted":"2025-06-17T08:39:48+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>9. Movies with ≥ 50 Ratings</h2>\n"}]}},{"text":"%pyspark\n\nfrom pyspark.sql.functions import avg, count\n\n# Find the average rating and number of ratings for each movie\nmovie_stats_df = rating_df.groupBy(\"item_id\") \\\n    .agg(\n        avg(\"rating\").alias(\"avg_rating\"),\n        count(\"rating\").alias(\"num_ratings\")\n    )\n\n# Add movie name\nmovie_stats_with_title = movie_stats_df.join(item_df, on=\"item_id\")\n\n# Display the top 10 movies with the highest ratings and times >= 50\nmovie_stats_with_title.filter(\"num_ratings >= 50\") \\\n    .orderBy(\"avg_rating\", ascending=False) \\\n    .select(\"title\", \"avg_rating\", \"num_ratings\") \\\n    .show(10, truncate=False)\n\n","user":"anonymous","dateUpdated":"2025-06-17T08:10:47+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------------------------------------------------+------------------+-----------+\n|title                                                 |avg_rating        |num_ratings|\n+------------------------------------------------------+------------------+-----------+\n|Close Shave, A (1995)                                 |4.491071428571429 |112        |\n|Schindler's List (1993)                               |4.466442953020135 |298        |\n|Wrong Trousers, The (1993)                            |4.466101694915254 |118        |\n|Casablanca (1942)                                     |4.45679012345679  |243        |\n|Wallace & Gromit: The Best of Aardman Animation (1996)|4.447761194029851 |67         |\n|Shawshank Redemption, The (1994)                      |4.445229681978798 |283        |\n|Rear Window (1954)                                    |4.3875598086124405|209        |\n|Usual Suspects, The (1995)                            |4.385767790262173 |267        |\n|Star Wars (1977)                                      |4.3584905660377355|583        |\n|12 Angry Men (1957)                                   |4.344             |125        |\n+------------------------------------------------------+------------------+-----------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750135126456_-484573896","id":"20250617-043846_1619805853","dateCreated":"2025-06-17T04:38:46+0000","dateStarted":"2025-06-17T08:12:00+0000","dateFinished":"2025-06-17T08:12:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19971"},{"text":"%md\n## 10. Active Users with ≥ 50 Ratings\n\n","user":"anonymous","dateUpdated":"2025-06-17T08:40:03+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750149595878_602531838","id":"20250617-083955_481583051","dateCreated":"2025-06-17T08:39:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21937","dateFinished":"2025-06-17T08:40:03+0000","dateStarted":"2025-06-17T08:40:03+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>10. Active Users with ≥ 50 Ratings</h2>\n"}]}},{"text":"%pyspark\r\n\r\nfrom pyspark.sql.functions import count\r\n\r\n# Number of movies rated by each user\r\nuser_rating_count = rating_df.groupBy(\"user_id\") \\\r\n    .agg(count(\"item_id\").alias(\"num_rated\"))\r\n\r\n# Only keep users with a rating ≥ 50\r\nactive_users = user_rating_count.filter(\"num_rated >= 50\")\r\n\r\nactive_users.show(5)\r\n","user":"anonymous","dateUpdated":"2025-06-17T08:10:47+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---------+\n|user_id|num_rated|\n+-------+---------+\n|     26|      107|\n|    474|      327|\n|     65|       80|\n|    541|      133|\n|    293|      388|\n+-------+---------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750135516411_-1900118174","id":"20250617-044516_533063098","dateCreated":"2025-06-17T04:45:16+0000","dateStarted":"2025-06-17T08:12:03+0000","dateFinished":"2025-06-17T08:12:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19972"},{"text":"%md\n## 11. Extract Movie Genres and Expand\n\n","user":"anonymous","dateUpdated":"2025-06-17T08:40:21+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750149609135_-1346221341","id":"20250617-084009_704986434","dateCreated":"2025-06-17T08:40:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:22021","dateFinished":"2025-06-17T08:40:21+0000","dateStarted":"2025-06-17T08:40:21+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>11. Extract Movie Genres and Expand</h2>\n"}]}},{"text":"%pyspark\n\n# Names of all movie genres (MovieLens 19 genres)s）\ngenre_list = [\n    \"unknown\", \"Action\", \"Adventure\", \"Animation\", \"Children's\", \"Comedy\", \"Crime\",\n    \"Documentary\", \"Drama\", \"Fantasy\", \"Film-Noir\", \"Horror\", \"Musical\", \"Mystery\",\n    \"Romance\", \"Sci-Fi\", \"Thriller\", \"War\", \"Western\"\n]\n\n# Read u.item, extract item_id and type flag\nitem_rdd = sc.textFile(\"hdfs:///user/maria_dev/movielens/u.item\")\n\n# Split one-hot types into multiple lines: (item_id, genre) format\ngenre_expanded_rdd = item_rdd.map(lambda line: line.split(\"|\")) \\\n    .flatMap(lambda parts: [\n        (int(parts[0]), genre_list[i]) \n        for i in range(19) if parts[5+i] == \"1\"\n    ])\n\n# Convert to DataFrame: column names are item_id, genre\ngenre_df = genre_expanded_rdd.toDF([\"item_id\", \"genre\"])\n\ngenre_df.show(5)\n\n","user":"anonymous","dateUpdated":"2025-06-17T08:10:47+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+----------+\n|item_id|     genre|\n+-------+----------+\n|      1| Animation|\n|      1|Children's|\n|      1|    Comedy|\n|      2|    Action|\n|      2| Adventure|\n+-------+----------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750135839563_449803870","id":"20250617-045039_360777607","dateCreated":"2025-06-17T04:50:39+0000","dateStarted":"2025-06-17T08:12:05+0000","dateFinished":"2025-06-17T08:12:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19973"},{"text":"%md\n## 12. Most Preferred Genre per User\n\n","user":"anonymous","dateUpdated":"2025-06-17T08:40:51+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750149634407_-1770801881","id":"20250617-084034_710273058","dateCreated":"2025-06-17T08:40:34+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:22108","dateFinished":"2025-06-17T08:40:51+0000","dateStarted":"2025-06-17T08:40:51+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>12. Most Preferred Genre per User</h2>\n"}]}},{"text":"%pyspark\r\n\r\nfrom pyspark.sql.functions import count, row_number\r\nfrom pyspark.sql.window import Window\r\n\r\n# Step 5: Join the rating data with the movie genre\r\nuser_genre_df = rating_df.join(genre_df, on=\"item_id\")\r\n\r\n# Step 6: Only keep users with a rating ≥ 50\r\nfiltered_user_genre = user_genre_df.join(active_users, on=\"user_id\")\r\n\r\n# Count the number of times each user rates each type\r\nuser_genre_count = filtered_user_genre.groupBy(\"user_id\", \"genre\") \\\r\n    .agg(count(\"*\").alias(\"genre_count\"))\r\n\r\n# Use window functions to find the most rated types for each user\r\nwindow_spec = Window.partitionBy(\"user_id\").orderBy(user_genre_count[\"genre_count\"].desc())\r\n\r\ntop_genre_per_user = user_genre_count \\\r\n    .withColumn(\"rank\", row_number().over(window_spec)) \\\r\n    .filter(\"rank = 1\") \\\r\n    .select(\"user_id\", \"genre\", \"genre_count\")\r\n\r\ntop_genre_per_user.show(10, truncate=False)\r\n","user":"anonymous","dateUpdated":"2025-06-17T08:10:48+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+------+-----------+\n|user_id|genre |genre_count|\n+-------+------+-----------+\n|26     |Drama |41         |\n|474    |Drama |166        |\n|65     |Drama |46         |\n|541    |Comedy|52         |\n|222    |Comedy|131        |\n|270    |Drama |56         |\n|293    |Drama |165        |\n|938    |Comedy|40         |\n|243    |Drama |59         |\n|367    |Horror|31         |\n+-------+------+-----------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750135968066_-1247507419","id":"20250617-045248_1245808384","dateCreated":"2025-06-17T04:52:48+0000","dateStarted":"2025-06-17T08:12:06+0000","dateFinished":"2025-06-17T08:12:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19974"},{"text":"%md\r\n## 13. Users Younger than 20\r\n","user":"anonymous","dateUpdated":"2025-06-17T08:41:08+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750149662943_1191825947","id":"20250617-084102_75053388","dateCreated":"2025-06-17T08:41:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:22198","dateFinished":"2025-06-17T08:41:08+0000","dateStarted":"2025-06-17T08:41:08+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>13. Users Younger than 20</h2>\n"}]}},{"text":"%pyspark\n\n# Find users who are younger than 20 years old\nteen_users_df = user_df.filter(\"age < 20\")\n\n# Display the first few\nteen_users_df.show(10)\n\n","user":"anonymous","dateUpdated":"2025-06-17T08:10:48+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+------+-------------+------+-------+\n|age|gender|   occupation|userid|zipcode|\n+---+------+-------------+------+-------+\n|  7|     M|      student|    30|  55436|\n| 19|     F|      student|    36|  93117|\n| 18|     F|      student|    52|  55105|\n| 16|     M|         none|    57|  84010|\n| 17|     M|      student|    67|  60402|\n| 19|     M|      student|    68|  22904|\n| 15|     M|      student|   101|  05146|\n| 19|     M|      student|   110|  77840|\n| 13|     M|        other|   142|  48118|\n| 15|     M|entertainment|   179|  20755|\n+---+------+-------------+------+-------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750136065827_437428964","id":"20250617-045425_1565737125","dateCreated":"2025-06-17T04:54:25+0000","dateStarted":"2025-06-17T08:12:06+0000","dateFinished":"2025-06-17T08:12:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19975"},{"text":"%md\n## 14. Scientists Aged 30–40\n\n","user":"anonymous","dateUpdated":"2025-06-17T08:41:26+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750149677375_-1543338660","id":"20250617-084117_1708432599","dateCreated":"2025-06-17T08:41:17+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:22282","dateFinished":"2025-06-17T08:41:26+0000","dateStarted":"2025-06-17T08:41:26+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>14. Scientists Aged 30–40</h2>\n"}]}},{"text":"%pyspark\r\n\r\n# Filter users whose occupation is scientist and whose age is between 30 and 40 years old\r\ntarget_users_df = user_df.filter(\r\n    (user_df.occupation == \"scientist\") &\r\n    (user_df.age >= 30) & (user_df.age <= 40)\r\n)\r\n\r\ntarget_users_df.show()\r\n","user":"anonymous","dateUpdated":"2025-06-17T08:10:48+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+------+----------+------+-------+\n|age|gender|occupation|userid|zipcode|\n+---+------+----------+------+-------+\n| 38|     M| scientist|    40|  27514|\n| 39|     M| scientist|    71|  98034|\n| 39|     M| scientist|    74|  T8H1N|\n| 39|     M| scientist|   107|  60466|\n| 33|     M| scientist|   183|  27708|\n| 33|     M| scientist|   272|  53706|\n| 40|     M| scientist|   309|  70802|\n| 37|     M| scientist|   337|  10522|\n| 38|     M| scientist|   430|  98199|\n| 31|     M| scientist|   538|  21010|\n| 33|     M| scientist|   543|  95123|\n| 32|     M| scientist|   554|  62901|\n| 39|     M| scientist|   643|  55122|\n| 31|     F| scientist|   730|  32114|\n| 36|     M| scientist|   874|  37076|\n| 40|     M| scientist|   918|  70116|\n+---+------+----------+------+-------+\n\n"}]},"apps":[],"jobName":"paragraph_1750136164487_1500444202","id":"20250617-045604_687085767","dateCreated":"2025-06-17T04:56:04+0000","dateStarted":"2025-06-17T08:12:11+0000","dateFinished":"2025-06-17T08:12:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19976"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2025-06-17T08:10:48+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750136381298_-1234473049","id":"20250617-045941_29708573","dateCreated":"2025-06-17T04:59:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:19977"}],"name":"Untitled Note 4","id":"2KW8YZXE7","angularObjects":{"2CHS8UYQQ:shared_process":[],"2C8A4SZ9T_livy2:shared_process":[],"2CK8A9MEG:shared_process":[],"2C4U48MY3_spark2:shared_process":[],"2CKAY1A8Y:shared_process":[],"2CKEKWY8Z:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}